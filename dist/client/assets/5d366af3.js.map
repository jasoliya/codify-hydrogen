{"version":3,"file":"5d366af3.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/cart-queries.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/hooks.client.js"],"sourcesContent":["export const CartLineAdd = (cartFragment) => `\nmutation CartLineAdd($cartId: ID!, $lines: [CartLineInput!]!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartLinesAdd(cartId: $cartId, lines: $lines) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartCreate = (cartFragment) => `\nmutation CartCreate($input: CartInput!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartCreate(input: $input) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartLineRemove = (cartFragment) => `\nmutation CartLineRemove($cartId: ID!, $lines: [ID!]!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartLinesRemove(cartId: $cartId, lineIds: $lines) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartLineUpdate = (cartFragment) => `\nmutation CartLineUpdate($cartId: ID!, $lines: [CartLineUpdateInput!]!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartLinesUpdate(cartId: $cartId, lines: $lines) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartNoteUpdate = (cartFragment) => `\nmutation CartNoteUpdate($cartId: ID!, $note: String, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartNoteUpdate(cartId: $cartId, note: $note) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartBuyerIdentityUpdate = (cartFragment) => `\nmutation CartBuyerIdentityUpdate(\n  $cartId: ID!\n  $buyerIdentity: CartBuyerIdentityInput!\n  $numCartLines: Int = 250\n  $country: CountryCode = ZZ\n) @inContext(country: $country) {\n  cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartAttributesUpdate = (cartFragment) => `\nmutation CartAttributesUpdate($attributes: [AttributeInput!]!, $cartId: ID!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartAttributesUpdate(attributes: $attributes, cartId: $cartId) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartDiscountCodesUpdate = (cartFragment) => `\nmutation CartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!], $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {\n    cart {\n      ...CartFragment\n    }\n  }\n}\n\n${cartFragment}\n`;\nexport const CartQuery = (cartFragment) => `\nquery CartQuery($id: ID!, $numCartLines: Int = 250, $country: CountryCode = ZZ) @inContext(country: $country) {\n  cart(id: $id) {\n    ...CartFragment\n  }\n}\n\n${cartFragment}\n`;\nexport const defaultCartFragment = `\nfragment CartFragment on Cart {\n  id\n  checkoutUrl\n  totalQuantity\n  buyerIdentity {\n    countryCode\n    customer {\n      id\n      email\n      firstName\n      lastName\n      displayName\n    }\n    email\n    phone\n  }\n  lines(first: $numCartLines) {\n    edges {\n      node {\n        id\n        quantity\n        attributes {\n          key\n          value\n        }\n        cost {\n          totalAmount {\n            amount\n            currencyCode\n          }\n          compareAtAmountPerQuantity {\n            amount\n            currencyCode\n          }\n        }\n        merchandise {\n          ... on ProductVariant {\n            id\n            availableForSale\n            compareAtPriceV2 {\n              ...MoneyFragment\n            }\n            priceV2 {\n              ...MoneyFragment\n            }\n            requiresShipping\n            title\n            image {\n              ...ImageFragment\n            }\n            product {\n              handle\n              title\n            }\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n  cost {\n    subtotalAmount {\n      ...MoneyFragment\n    }\n    totalAmount {\n      ...MoneyFragment\n    }\n    totalDutyAmount {\n      ...MoneyFragment\n    }\n    totalTaxAmount {\n      ...MoneyFragment\n    }\n  }\n  note\n  attributes {\n    key\n    value\n  }\n  discountCodes {\n    code\n  }\n}\n\nfragment MoneyFragment on MoneyV2 {\n  currencyCode\n  amount\n}\nfragment ImageFragment on Image {\n  id\n  url\n  altText\n  width\n  height\n}\n`;\n","import React, { useState } from 'react';\nimport { useShop } from '../../foundation';\nimport { flattenConnection } from '../../utilities';\nimport { CartCreate, defaultCartFragment } from './cart-queries';\nimport { SHOPIFY_STOREFRONT_ID_HEADER, STOREFRONT_API_PUBLIC_TOKEN_HEADER, SHOPIFY_STOREFRONT_Y_HEADER, SHOPIFY_STOREFRONT_S_HEADER, SHOPIFY_Y, SHOPIFY_S, } from '../../constants';\nimport { parse } from 'worktop/cookie';\nexport function useCartFetch() {\n    const { storeDomain, storefrontApiVersion, storefrontToken, storefrontId } = useShop();\n    return React.useCallback(({ query, variables, }) => {\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-SDK-Variant': 'hydrogen',\n            'X-SDK-Version': storefrontApiVersion,\n            [STOREFRONT_API_PUBLIC_TOKEN_HEADER]: storefrontToken,\n        };\n        if (storefrontId) {\n            headers[SHOPIFY_STOREFRONT_ID_HEADER] = storefrontId;\n        }\n        // Find Shopify cookies\n        const cookieData = parse(document.cookie);\n        if (cookieData[SHOPIFY_Y] && cookieData[SHOPIFY_S]) {\n            headers[SHOPIFY_STOREFRONT_Y_HEADER] = cookieData[SHOPIFY_Y];\n            headers[SHOPIFY_STOREFRONT_S_HEADER] = cookieData[SHOPIFY_S];\n        }\n        return fetch(`https://${storeDomain}/api/${storefrontApiVersion}/graphql.json`, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({\n                query: query.toString(),\n                variables,\n            }),\n        })\n            .then((res) => res.json())\n            .catch((error) => {\n            return {\n                data: undefined,\n                error: error.toString(),\n            };\n        });\n    }, [storeDomain, storefrontApiVersion, storefrontToken, storefrontId]);\n}\nexport function useInstantCheckout() {\n    const [cart, updateCart] = useState();\n    const [checkoutUrl, updateCheckoutUrl] = useState();\n    const [error, updateError] = useState();\n    const fetch = useCartFetch();\n    const createInstantCheckout = React.useCallback(async (cartInput) => {\n        const { data, errors } = await fetch({\n            query: CartCreate(defaultCartFragment),\n            variables: {\n                input: cartInput,\n            },\n        });\n        if (errors) {\n            updateError(errors);\n            updateCart(undefined);\n            updateCheckoutUrl(undefined);\n        }\n        if (data?.cartCreate?.cart) {\n            const dataCart = data.cartCreate.cart;\n            updateCart({\n                ...dataCart,\n                // @ts-expect-error While the cart still uses fragments, there will be a TS error here until we remove those fragments and get the type in-line\n                lines: flattenConnection(dataCart.lines),\n                note: dataCart.note ?? undefined,\n            });\n            updateCheckoutUrl(dataCart.checkoutUrl);\n        }\n    }, [fetch]);\n    return { cart, checkoutUrl, error, createInstantCheckout };\n}\n"],"names":["React","parse","useState"],"mappings":"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"}