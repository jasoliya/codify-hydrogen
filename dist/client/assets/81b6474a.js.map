{"version":3,"file":"81b6474a.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/constants.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/CartProvider.client.js"],"sourcesContent":["export const CART_ID_STORAGE_KEY = 'shopifyCartId';\nexport const CART_COOKIE_TTL_DAYS = 14;\n","import React, { useEffect, useCallback, useReducer, useMemo, useRef, } from 'react';\nimport { flattenConnection } from '../../utilities/flattenConnection';\nimport { CartLineAdd, CartCreate, CartLineRemove, CartLineUpdate, CartNoteUpdate, CartBuyerIdentityUpdate, CartAttributesUpdate, CartDiscountCodesUpdate, CartQuery, defaultCartFragment, } from './cart-queries';\nimport { CountryCode, } from '../../storefront-api-types';\nimport { useCartFetch } from './hooks.client';\nimport { CartContext } from './context';\nimport { CART_ID_STORAGE_KEY } from './constants';\nimport { ClientAnalytics } from '../../foundation/Analytics/ClientAnalytics';\nfunction cartReducer(state, action) {\n    switch (action.type) {\n        case 'cartFetch': {\n            if (state.status === 'uninitialized') {\n                return {\n                    status: 'fetching',\n                };\n            }\n            break;\n        }\n        case 'cartCreate': {\n            if (state.status === 'uninitialized') {\n                return {\n                    status: 'creating',\n                };\n            }\n            break;\n        }\n        case 'resolve': {\n            const resolvableStatuses = ['updating', 'fetching', 'creating'];\n            if (resolvableStatuses.includes(state.status)) {\n                return {\n                    status: 'idle',\n                    cart: action.cart,\n                };\n            }\n            break;\n        }\n        case 'reject': {\n            if (action.errors) {\n                console.group('%cCart Error:', 'color:red');\n                for (const [i, error] of action.errors.entries()) {\n                    console.log(`%c${i + 1}. ` + error.message, 'color:red');\n                }\n                console.groupEnd();\n            }\n            if (state.status === 'fetching' || state.status === 'creating') {\n                return { status: 'uninitialized', error: action.errors };\n            }\n            else if (state.status === 'updating') {\n                return {\n                    status: 'idle',\n                    cart: state.lastValidCart,\n                    error: action.errors,\n                };\n            }\n            break;\n        }\n        case 'resetCart': {\n            if (state.status === 'fetching') {\n                return { status: 'uninitialized' };\n            }\n            break;\n        }\n        case 'addLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'removeLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: {\n                        ...state.cart,\n                        lines: state.cart.lines.filter(({ id }) => !action.lines.includes(id)),\n                    },\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'updateLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: {\n                        ...state.cart,\n                        lines: state.cart.lines.map((line) => {\n                            const updatedLine = action.lines.find(({ id }) => id === line.id);\n                            if (updatedLine && updatedLine.quantity) {\n                                return {\n                                    ...line,\n                                    quantity: updatedLine.quantity,\n                                };\n                            }\n                            return line;\n                        }),\n                    },\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'noteUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'buyerIdentityUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'cartAttributesUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'discountCodesUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n    }\n    throw new Error(`Cannot dispatch event (${action.type}) for current cart state (${state.status})`);\n}\n/**\n * The `CartProvider` component creates a context for using a cart. It creates a cart object and callbacks\n * that can be accessed by any descendent component using the `useCart` hook and related hooks. It also carries out\n * any callback props when a relevant action is performed. For example, if a `onLineAdd` callback is provided,\n * then the callback will be called when a new line item is successfully added to the cart.\n *\n * The `CartProvider` component must be a descendent of the `ShopifyProvider` component.\n * You must use this component if you want to use the `useCart` hook or related hooks, or if you would like to use the `AddToCartButton` component.\n */\nexport function CartProvider({ children, numCartLines, onCreate, onLineAdd, onLineRemove, onLineUpdate, onNoteUpdate, onBuyerIdentityUpdate, onAttributesUpdate, onDiscountCodesUpdate, data: cart, cartFragment = defaultCartFragment, customerAccessToken, countryCode = CountryCode.Us, }) {\n    if (countryCode)\n        countryCode = countryCode.toUpperCase();\n    const initialStatus = cart\n        ? { status: 'idle', cart: cartFromGraphQL(cart) }\n        : { status: 'uninitialized' };\n    const [state, dispatch] = useReducer((state, dispatch) => cartReducer(state, dispatch), initialStatus);\n    const fetchCart = useCartFetch();\n    const countryChanged = state.status === 'idle' &&\n        countryCode !== state?.cart?.buyerIdentity?.countryCode &&\n        !state.error;\n    const cartFetch = useCallback(async (cartId) => {\n        dispatch({ type: 'cartFetch' });\n        const { data } = await fetchCart({\n            query: CartQuery(cartFragment),\n            variables: {\n                id: cartId,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n        if (!data?.cart) {\n            window.localStorage.removeItem(CART_ID_STORAGE_KEY);\n            dispatch({ type: 'resetCart' });\n            return;\n        }\n        dispatch({ type: 'resolve', cart: cartFromGraphQL(data.cart) });\n    }, [fetchCart, cartFragment, numCartLines, countryCode]);\n    const cartCreate = useCallback(async (cart) => {\n        dispatch({ type: 'cartCreate' });\n        onCreate?.();\n        if (countryCode && !cart.buyerIdentity?.countryCode) {\n            if (cart.buyerIdentity == null) {\n                cart.buyerIdentity = {};\n            }\n            cart.buyerIdentity.countryCode = countryCode;\n        }\n        if (customerAccessToken && !cart.buyerIdentity?.customerAccessToken) {\n            if (cart.buyerIdentity == null) {\n                cart.buyerIdentity = {};\n            }\n            cart.buyerIdentity.customerAccessToken = customerAccessToken;\n        }\n        const { data, errors } = await fetchCart({\n            query: CartCreate(cartFragment),\n            variables: {\n                input: cart,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n        if (errors) {\n            dispatch({\n                type: 'reject',\n                errors,\n            });\n        }\n        if (data?.cartCreate?.cart) {\n            if (cart.lines) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n                    addedCartLines: cart.lines,\n                    cart: data.cartCreate.cart,\n                });\n            }\n            dispatch({\n                type: 'resolve',\n                cart: cartFromGraphQL(data.cartCreate.cart),\n            });\n            window.localStorage.setItem(CART_ID_STORAGE_KEY, data.cartCreate.cart.id);\n        }\n    }, [\n        onCreate,\n        countryCode,\n        fetchCart,\n        cartFragment,\n        numCartLines,\n        customerAccessToken,\n    ]);\n    const addLineItem = useCallback(async (lines, state) => {\n        if (state.status === 'idle') {\n            dispatch({ type: 'addLineItem' });\n            onLineAdd?.();\n            const { data, errors } = await fetchCart({\n                query: CartLineAdd(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (errors) {\n                dispatch({\n                    type: 'reject',\n                    errors,\n                });\n            }\n            if (data?.cartLinesAdd?.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n                    addedCartLines: lines,\n                    cart: data.cartLinesAdd.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesAdd.cart),\n                });\n            }\n        }\n    }, [onLineAdd, fetchCart, cartFragment, numCartLines, countryCode]);\n    const removeLineItem = useCallback(async (lines, state) => {\n        if (state.status === 'idle') {\n            dispatch({ type: 'removeLineItem', lines });\n            onLineRemove?.();\n            const { data, errors } = await fetchCart({\n                query: CartLineRemove(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (errors) {\n                dispatch({\n                    type: 'reject',\n                    errors,\n                });\n            }\n            if (data?.cartLinesRemove?.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.REMOVE_FROM_CART, true, {\n                    removedCartLines: lines,\n                    cart: data.cartLinesRemove.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesRemove.cart),\n                });\n            }\n        }\n    }, [onLineRemove, fetchCart, cartFragment, numCartLines, countryCode]);\n    const updateLineItem = useCallback(async (lines, state) => {\n        if (state.status === 'idle') {\n            dispatch({ type: 'updateLineItem', lines });\n            onLineUpdate?.();\n            const { data, errors } = await fetchCart({\n                query: CartLineUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (errors) {\n                dispatch({\n                    type: 'reject',\n                    errors,\n                });\n            }\n            if (data?.cartLinesUpdate?.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.UPDATE_CART, true, {\n                    updatedCartLines: lines,\n                    oldCart: state.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesUpdate.cart),\n                });\n            }\n        }\n    }, [onLineUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const noteUpdate = useCallback(async (note, state) => {\n        if (state.status === 'idle') {\n            dispatch({ type: 'noteUpdate' });\n            onNoteUpdate?.();\n            const { data, errors } = await fetchCart({\n                query: CartNoteUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    note,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (errors) {\n                dispatch({\n                    type: 'reject',\n                    errors,\n                });\n            }\n            if (data?.cartNoteUpdate?.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartNoteUpdate.cart),\n                });\n            }\n        }\n    }, [onNoteUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const buyerIdentityUpdate = useCallback(async (buyerIdentity, state) => {\n        if (state.status === 'idle') {\n            dispatch({ type: 'buyerIdentityUpdate' });\n            onBuyerIdentityUpdate?.();\n            const { data, errors } = await fetchCart({\n                query: CartBuyerIdentityUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    buyerIdentity,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (errors) {\n                dispatch({\n                    type: 'reject',\n                    errors,\n                });\n            }\n            if (data?.cartBuyerIdentityUpdate?.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartBuyerIdentityUpdate.cart),\n                });\n            }\n        }\n    }, [onBuyerIdentityUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const cartAttributesUpdate = useCallback(async (attributes, state) => {\n        if (state.status === 'idle') {\n            dispatch({ type: 'cartAttributesUpdate' });\n            onAttributesUpdate?.();\n            const { data, errors } = await fetchCart({\n                query: CartAttributesUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    attributes,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (errors) {\n                dispatch({\n                    type: 'reject',\n                    errors,\n                });\n            }\n            if (data?.cartAttributesUpdate?.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartAttributesUpdate.cart),\n                });\n            }\n        }\n    }, [onAttributesUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const discountCodesUpdate = useCallback(async (discountCodes, state) => {\n        if (state.status === 'idle') {\n            dispatch({ type: 'discountCodesUpdate' });\n            onDiscountCodesUpdate?.();\n            const { data, errors } = await fetchCart({\n                query: CartDiscountCodesUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    discountCodes,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (errors) {\n                dispatch({\n                    type: 'reject',\n                    errors,\n                });\n            }\n            if (data?.cartDiscountCodesUpdate?.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.DISCOUNT_CODE_UPDATED, true, {\n                    updatedDiscountCodes: discountCodes,\n                    cart: data.cartDiscountCodesUpdate.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartDiscountCodesUpdate.cart),\n                });\n            }\n        }\n    }, [onDiscountCodesUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const didFetchCart = useRef(false);\n    useEffect(() => {\n        if (localStorage.getItem(CART_ID_STORAGE_KEY) &&\n            state.status === 'uninitialized' &&\n            !didFetchCart.current) {\n            didFetchCart.current = true;\n            cartFetch(localStorage.getItem(CART_ID_STORAGE_KEY));\n        }\n    }, [cartFetch, state]);\n    useEffect(() => {\n        if (!countryChanged)\n            return;\n        buyerIdentityUpdate({ countryCode, customerAccessToken }, state);\n    }, [\n        state,\n        buyerIdentityUpdate,\n        countryCode,\n        customerAccessToken,\n        countryChanged,\n    ]);\n    const cartContextValue = useMemo(() => {\n        return {\n            ...('cart' in state\n                ? state.cart\n                : {\n                    lines: [],\n                    attributes: [],\n                    ...(cart ? cartFromGraphQL(cart) : {}),\n                }),\n            status: state.status,\n            error: 'error' in state ? state.error : undefined,\n            totalQuantity: 'cart' in state ? state?.cart?.totalQuantity ?? 0 : 0,\n            cartCreate,\n            linesAdd(lines) {\n                if ('cart' in state && state.cart.id) {\n                    addLineItem(lines, state);\n                }\n                else {\n                    cartCreate({ lines });\n                }\n            },\n            linesRemove(lines) {\n                removeLineItem(lines, state);\n            },\n            linesUpdate(lines) {\n                updateLineItem(lines, state);\n            },\n            noteUpdate(note) {\n                noteUpdate(note, state);\n            },\n            buyerIdentityUpdate(buyerIdentity) {\n                buyerIdentityUpdate(buyerIdentity, state);\n            },\n            cartAttributesUpdate(attributes) {\n                cartAttributesUpdate(attributes, state);\n            },\n            discountCodesUpdate(discountCodes) {\n                discountCodesUpdate(discountCodes, state);\n            },\n            cartFragment,\n        };\n    }, [\n        state,\n        cart,\n        cartCreate,\n        cartFragment,\n        addLineItem,\n        removeLineItem,\n        updateLineItem,\n        noteUpdate,\n        buyerIdentityUpdate,\n        cartAttributesUpdate,\n        discountCodesUpdate,\n    ]);\n    return (React.createElement(CartContext.Provider, { value: cartContextValue }, children));\n}\nfunction cartFromGraphQL(cart) {\n    return {\n        ...cart,\n        // @ts-expect-error While the cart still uses fragments, there will be a TS error here until we remove those fragments and get the type in-line\n        lines: flattenConnection(cart.lines),\n        note: cart.note ?? undefined,\n    };\n}\n"],"names":["state","action","type","status","resolvableStatuses","includes","cart","errors","console","group","i","error","entries","log","message","groupEnd","lastValidCart","lines","filter","id","map","line","updatedLine","find","quantity","Error","children","numCartLines","onCreate","onLineAdd","onLineRemove","onLineUpdate","onNoteUpdate","onBuyerIdentityUpdate","onAttributesUpdate","onDiscountCodesUpdate","data","cartFragment","defaultCartFragment","customerAccessToken","countryCode","CountryCode","Us","toUpperCase","initialStatus","cartFromGraphQL","dispatch","useReducer","cartReducer","fetchCart","useCartFetch","countryChanged","buyerIdentity","cartFetch","useCallback","cartId","query","CartQuery","variables","country","window","localStorage","removeItem","CART_ID_STORAGE_KEY","cartCreate","CartCreate","input","ClientAnalytics","publish","eventNames","ADD_TO_CART","addedCartLines","setItem","addLineItem","CartLineAdd","cartLinesAdd","removeLineItem","CartLineRemove","cartLinesRemove","REMOVE_FROM_CART","removedCartLines","updateLineItem","CartLineUpdate","cartLinesUpdate","UPDATE_CART","updatedCartLines","oldCart","noteUpdate","note","CartNoteUpdate","cartNoteUpdate","buyerIdentityUpdate","CartBuyerIdentityUpdate","cartBuyerIdentityUpdate","cartAttributesUpdate","attributes","CartAttributesUpdate","discountCodesUpdate","discountCodes","CartDiscountCodesUpdate","cartDiscountCodesUpdate","DISCOUNT_CODE_UPDATED","updatedDiscountCodes","didFetchCart","useRef","useEffect","getItem","current","cartContextValue","useMemo","undefined","totalQuantity","linesAdd","linesRemove","linesUpdate","_jsx","flattenConnection"],"mappings":"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"}